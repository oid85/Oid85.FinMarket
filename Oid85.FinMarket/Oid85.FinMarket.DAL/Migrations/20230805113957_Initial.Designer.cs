// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Oid85.FinMarket.DAL;

#nullable disable

namespace Oid85.FinMarket.DAL.Migrations
{
    [DbContext(typeof(StorageDataBaseContext))]
    [Migration("20230805113957_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Oid85.FinMarket.DAL.Entities.AssetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("figi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasKey("Id");

                    b.ToTable("assets", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DAL.Entities._1D_CandleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("_1D", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DAL.Entities._1H_CandleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("_1H", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DAL.Entities._1M_CandleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.ToTable("_1M", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
