// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Oid85.FinMarket.DataAccess;

#nullable disable

namespace Oid85.FinMarket.DataAccess.Migrations
{
    [DbContext(typeof(FinMarketContext))]
    partial class FinMarketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.AnalyseResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("analyse_result_type_id");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timeframe");

                    b.HasKey("Id")
                        .HasName("pk_analyse_results");

                    b.HasIndex("Ticker")
                        .HasDatabaseName("ix_analyse_results_ticker");

                    b.ToTable("analyse_results", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.BondEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("figi");

                    b.Property<bool>("InPortfolio")
                        .HasColumnType("boolean")
                        .HasColumnName("in_portfolio");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isin");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bonds");

                    b.ToTable("bonds", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.CandleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<string>("Timeframe")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timeframe");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_candles");

                    b.HasIndex("Ticker")
                        .HasDatabaseName("ix_candles_ticker");

                    b.ToTable("candles", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.DividendInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeclaredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("declared_date");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Dividend")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend");

                    b.Property<double>("DividendPrc")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_prc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_date");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dividend_info_entities");

                    b.ToTable("dividend_info_entities", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.ShareEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("figi");

                    b.Property<bool>("InIrusIndex")
                        .HasColumnType("boolean")
                        .HasColumnName("in_irus_index");

                    b.Property<bool>("InPortfolio")
                        .HasColumnType("boolean")
                        .HasColumnName("in_portfolio");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isin");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shares");

                    b.ToTable("shares", "public");
                });
#pragma warning restore 612, 618
        }
    }
}
