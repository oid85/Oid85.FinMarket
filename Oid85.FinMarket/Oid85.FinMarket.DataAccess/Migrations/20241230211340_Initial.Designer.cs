// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Oid85.FinMarket.DataAccess;

#nullable disable

namespace Oid85.FinMarket.DataAccess.Migrations
{
    [DbContext(typeof(FinMarketContext))]
    [Migration("20241230211340_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.AnalyseResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AnalyseType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("analyse_type");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("result");

                    b.HasKey("Id")
                        .HasName("pk_analyse_results");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_analyse_results_instrument_id");

                    b.ToTable("analyse_results", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.AssetFundamentalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("AdrToCommonShareRatio")
                        .HasColumnType("double precision")
                        .HasColumnName("adr_to_common_share_ratio");

                    b.Property<double>("AverageDailyVolumeLast10Days")
                        .HasColumnType("double precision")
                        .HasColumnName("average_daily_volume_last_10_days");

                    b.Property<double>("AverageDailyVolumeLast4Weeks")
                        .HasColumnType("double precision")
                        .HasColumnName("average_daily_volume_last_4_weeks");

                    b.Property<double>("Beta")
                        .HasColumnType("double precision")
                        .HasColumnName("beta");

                    b.Property<double>("BuyBackTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("buy_back_ttm");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<double>("CurrentRatioMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("current_ratio_mrq");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("DilutedEpsTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("diluted_eps_ttm");

                    b.Property<double>("DividendPayoutRatioFy")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_payout_ratio_fy");

                    b.Property<double>("DividendRateTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_rate_ttm");

                    b.Property<double>("DividendYieldDailyTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_yield_daily_ttm");

                    b.Property<double>("DividendsPerShare")
                        .HasColumnType("double precision")
                        .HasColumnName("dividends_per_share");

                    b.Property<string>("DomicileIndicatorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("domicile_indicator_code");

                    b.Property<double>("EbitdaChangeFiveYears")
                        .HasColumnType("double precision")
                        .HasColumnName("ebitda_change_five_years");

                    b.Property<double>("EbitdaTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("ebitda_ttm");

                    b.Property<double>("EpsChangeFiveYears")
                        .HasColumnType("double precision")
                        .HasColumnName("eps_change_five_years");

                    b.Property<double>("EpsTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("eps_ttm");

                    b.Property<double>("EvToEbitdaMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("ev_to_ebitda_mrq");

                    b.Property<double>("EvToSales")
                        .HasColumnType("double precision")
                        .HasColumnName("ev_to_sales");

                    b.Property<DateOnly>("ExDividendDate")
                        .HasColumnType("date")
                        .HasColumnName("ex_dividend_date");

                    b.Property<DateOnly>("FiscalPeriodEndDate")
                        .HasColumnType("date")
                        .HasColumnName("fiscal_period_end_date");

                    b.Property<DateOnly>("FiscalPeriodStartDate")
                        .HasColumnType("date")
                        .HasColumnName("fiscal_period_start_date");

                    b.Property<double>("FiveYearAnnualDividendGrowthRate")
                        .HasColumnType("double precision")
                        .HasColumnName("five_year_annual_dividend_growth_rate");

                    b.Property<double>("FiveYearAnnualRevenueGrowthRate")
                        .HasColumnType("double precision")
                        .HasColumnName("five_year_annual_revenue_growth_rate");

                    b.Property<double>("FiveYearsAverageDividendYield")
                        .HasColumnType("double precision")
                        .HasColumnName("five_years_average_dividend_yield");

                    b.Property<double>("FixedChargeCoverageRatioFy")
                        .HasColumnType("double precision")
                        .HasColumnName("fixed_charge_coverage_ratio_fy");

                    b.Property<double>("ForwardAnnualDividendYield")
                        .HasColumnType("double precision")
                        .HasColumnName("forward_annual_dividend_yield");

                    b.Property<double>("FreeCashFlowToPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("free_cash_flow_to_price");

                    b.Property<double>("FreeCashFlowTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("free_cash_flow_ttm");

                    b.Property<double>("FreeFloat")
                        .HasColumnType("double precision")
                        .HasColumnName("free_float");

                    b.Property<double>("HighPriceLast52Weeks")
                        .HasColumnType("double precision")
                        .HasColumnName("high_price_last_52_weeks");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("LowPriceLast52Weeks")
                        .HasColumnType("double precision")
                        .HasColumnName("low_price_last_52_weeks");

                    b.Property<double>("MarketCapitalization")
                        .HasColumnType("double precision")
                        .HasColumnName("market_capitalization");

                    b.Property<double>("NetDebtToEbitda")
                        .HasColumnType("double precision")
                        .HasColumnName("net_debt_to_ebitda");

                    b.Property<double>("NetIncomeTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("net_income_ttm");

                    b.Property<double>("NetInterestMarginMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("net_interest_margin_mrq");

                    b.Property<double>("NetMarginMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("net_margin_mrq");

                    b.Property<double>("NumberOfEmployees")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_employees");

                    b.Property<double>("OneYearAnnualRevenueGrowthRate")
                        .HasColumnType("double precision")
                        .HasColumnName("one_year_annual_revenue_growth_rate");

                    b.Property<double>("PeRatioTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("pe_ratio_ttm");

                    b.Property<double>("PriceToBookTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_to_book_ttm");

                    b.Property<double>("PriceToFreeCashFlowTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_to_free_cash_flow_ttm");

                    b.Property<double>("PriceToSalesTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("price_to_sales_ttm");

                    b.Property<double>("RevenueChangeFiveYears")
                        .HasColumnType("double precision")
                        .HasColumnName("revenue_change_five_years");

                    b.Property<double>("RevenueTtm")
                        .HasColumnType("double precision")
                        .HasColumnName("revenue_ttm");

                    b.Property<double>("Roa")
                        .HasColumnType("double precision")
                        .HasColumnName("roa");

                    b.Property<double>("Roe")
                        .HasColumnType("double precision")
                        .HasColumnName("roe");

                    b.Property<double>("Roic")
                        .HasColumnType("double precision")
                        .HasColumnName("roic");

                    b.Property<double>("SharesOutstanding")
                        .HasColumnType("double precision")
                        .HasColumnName("shares_outstanding");

                    b.Property<double>("ThreeYearAnnualRevenueGrowthRate")
                        .HasColumnType("double precision")
                        .HasColumnName("three_year_annual_revenue_growth_rate");

                    b.Property<double>("TotalDebtChangeFiveYears")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt_change_five_years");

                    b.Property<double>("TotalDebtMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt_mrq");

                    b.Property<double>("TotalDebtToEbitdaMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt_to_ebitda_mrq");

                    b.Property<double>("TotalDebtToEquityMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt_to_equity_mrq");

                    b.Property<double>("TotalEnterpriseValueMrq")
                        .HasColumnType("double precision")
                        .HasColumnName("total_enterprise_value_mrq");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_asset_fundamentals");

                    b.ToTable("asset_fundamentals", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.BondCouponEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CouponDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_date");

                    b.Property<DateOnly>("CouponEndDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_end_date");

                    b.Property<long>("CouponNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("coupon_number");

                    b.Property<int>("CouponPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("coupon_period");

                    b.Property<DateOnly>("CouponStartDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_start_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("PayOneBond")
                        .HasColumnType("double precision")
                        .HasColumnName("pay_one_bond");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bond_coupons");

                    b.ToTable("bond_coupons", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.BondEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<bool>("FloatingCouponFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("floating_coupon_flag");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<DateOnly>("MaturityDate")
                        .HasColumnType("date")
                        .HasColumnName("maturity_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("Nkd")
                        .HasColumnType("double precision")
                        .HasColumnName("nkd");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bonds");

                    b.ToTable("bonds", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.CandleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_candles");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_candles_instrument_id");

                    b.ToTable("candles", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("class_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<string>("IsoCurrencyName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("iso_currency_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.DividendInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DeclaredDate")
                        .HasColumnType("date")
                        .HasColumnName("declared_date");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Dividend")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend");

                    b.Property<double>("DividendPrc")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_prc");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("RecordDate")
                        .HasColumnType("date")
                        .HasColumnName("record_date");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dividend_infos");

                    b.ToTable("dividend_infos", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FinIndexEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("class_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("exchange");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("InstrumentKind")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("instrument_kind");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_fin_indexes");

                    b.ToTable("fin_indexes", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FutureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asset_type");

                    b.Property<string>("BasicAsset")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("basic_asset");

                    b.Property<double>("BasicAssetSize")
                        .HasColumnType("double precision")
                        .HasColumnName("basic_asset_size");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<DateOnly>("FirstTradeDate")
                        .HasColumnType("date")
                        .HasColumnName("first_trade_date");

                    b.Property<string>("FutureType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("future_type");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<double>("InitialMarginOnBuy")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_margin_on_buy");

                    b.Property<double>("InitialMarginOnSell")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_margin_on_sell");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("LastTradeDate")
                        .HasColumnType("date")
                        .HasColumnName("last_trade-date");

                    b.Property<int>("Lot")
                        .HasColumnType("integer")
                        .HasColumnName("lot");

                    b.Property<double>("MinPriceIncrementAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("min_price_increment_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_futures");

                    b.ToTable("futures", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.InstrumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_instruments");

                    b.ToTable("instruments", "dictionary");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.ShareEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shares");

                    b.ToTable("shares", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.SpreadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("FirstInstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_instrument_id");

                    b.Property<double>("FirstInstrumentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("first_instrument_price");

                    b.Property<string>("FirstInstrumentRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_instrument_role");

                    b.Property<string>("FirstInstrumentTicker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_instrument_ticker");

                    b.Property<double>("Funding")
                        .HasColumnType("double precision")
                        .HasColumnName("funding");

                    b.Property<bool>("InWatchList")
                        .HasColumnType("boolean")
                        .HasColumnName("in_watch_list");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("PriceDifference")
                        .HasColumnType("double precision")
                        .HasColumnName("price_difference");

                    b.Property<Guid>("SecondInstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("second_instrument_id");

                    b.Property<double>("SecondInstrumentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("second_instrument_price");

                    b.Property<string>("SecondInstrumentRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_instrument_role");

                    b.Property<string>("SecondInstrumentTicker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_instrument_ticker");

                    b.Property<int>("SpreadPricePosition")
                        .HasColumnType("integer")
                        .HasColumnName("price_position");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_spreads");

                    b.ToTable("spreads", "storage");
                });
#pragma warning restore 612, 618
        }
    }
}
