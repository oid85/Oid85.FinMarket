// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Oid85.FinMarket.DataAccess;

#nullable disable

namespace Oid85.FinMarket.DataAccess.Migrations
{
    [DbContext(typeof(FinMarketContext))]
    [Migration("20250412140229_AddBvColumnToMultiplicatorTable")]
    partial class AddBvColumnToMultiplicatorTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.AnalyseResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AnalyseType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("analyse_type");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<double>("ResultNumber")
                        .HasColumnType("double precision")
                        .HasColumnName("result_number");

                    b.Property<string>("ResultString")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("result_string");

                    b.HasKey("Id")
                        .HasName("pk_analyse_results");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_analyse_results_instrument_id");

                    b.ToTable("analyse_results", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.AssetReportEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<int>("PeriodNum")
                        .HasColumnType("integer")
                        .HasColumnName("period_num");

                    b.Property<int>("PeriodYear")
                        .HasColumnType("integer")
                        .HasColumnName("period_year");

                    b.Property<DateOnly>("ReportDate")
                        .HasColumnType("date")
                        .HasColumnName("report_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_asset_report_events");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_asset_report_events_instrument_id");

                    b.ToTable("asset_report_events", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.BondCouponEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("CouponDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_date");

                    b.Property<DateOnly>("CouponEndDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_end_date");

                    b.Property<long>("CouponNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("coupon_number");

                    b.Property<int>("CouponPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("coupon_period");

                    b.Property<DateOnly>("CouponStartDate")
                        .HasColumnType("date")
                        .HasColumnName("coupon_start_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("PayOneBond")
                        .HasColumnType("double precision")
                        .HasColumnName("pay_one_bond");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bond_coupons");

                    b.ToTable("bond_coupons", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.BondEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<bool>("FloatingCouponFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("floating_coupon_flag");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<double>("LastPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_price");

                    b.Property<DateOnly>("MaturityDate")
                        .HasColumnType("date")
                        .HasColumnName("maturity_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<double>("Nkd")
                        .HasColumnType("double precision")
                        .HasColumnName("nkd");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("integer")
                        .HasColumnName("risk_level");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bonds");

                    b.ToTable("bonds", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.CandleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_daily_candles");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_daily_candles_instrument_id");

                    b.ToTable("daily_candles", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.CurrencyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("class_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<string>("IsoCurrencyName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("iso_currency_name");

                    b.Property<double>("LastPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.DividendInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DeclaredDate")
                        .HasColumnType("date")
                        .HasColumnName("declared_date");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Dividend")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend");

                    b.Property<double>("DividendPrc")
                        .HasColumnType("double precision")
                        .HasColumnName("dividend_prc");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("RecordDate")
                        .HasColumnType("date")
                        .HasColumnName("record_date");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_dividend_infos");

                    b.ToTable("dividend_infos", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FearGreedIndexEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double>("MarketMomentum")
                        .HasColumnType("double precision")
                        .HasColumnName("market_momentum");

                    b.Property<double>("MarketVolatility")
                        .HasColumnType("double precision")
                        .HasColumnName("market_volatility");

                    b.Property<double>("StockPriceBreadth")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_price_breadth");

                    b.Property<double>("StockPriceStrength")
                        .HasColumnType("double precision")
                        .HasColumnName("stock_price_strength");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_fear_greed_index");

                    b.ToTable("fear_greed_index", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FinIndexEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("class_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("exchange");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("InstrumentKind")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("instrument_kind");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("LastPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_fin_indexes");

                    b.ToTable("fin_indexes", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FiveMinuteCandleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Close")
                        .HasColumnType("double precision")
                        .HasColumnName("close");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<double>("High")
                        .HasColumnType("double precision")
                        .HasColumnName("high");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<double>("Low")
                        .HasColumnType("double precision")
                        .HasColumnName("low");

                    b.Property<double>("Open")
                        .HasColumnType("double precision")
                        .HasColumnName("open");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("pk_five_minute_candles");

                    b.HasIndex("InstrumentId")
                        .HasDatabaseName("ix_five_minute_candles_instrument_id");

                    b.ToTable("five_minute_candles", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.ForecastConsensusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("ConsensusPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("consensus_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currency");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("current_price");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("MaxTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("max_target");

                    b.Property<double>("MinTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("min_target");

                    b.Property<double>("PriceChange")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change");

                    b.Property<double>("PriceChangeRel")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change_rel");

                    b.Property<int>("RecommendationNumber")
                        .HasColumnType("integer")
                        .HasColumnName("recommendation_number");

                    b.Property<string>("RecommendationString")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("recommendation_string");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_forecast_consensuses");

                    b.ToTable("forecast_consensuses", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.ForecastTargetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("company");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("currency");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("current_price");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("PriceChange")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change");

                    b.Property<double>("PriceChangeRel")
                        .HasColumnType("double precision")
                        .HasColumnName("price_change_rel");

                    b.Property<DateOnly>("RecommendationDate")
                        .HasColumnType("date")
                        .HasColumnName("recommendation_date");

                    b.Property<int>("RecommendationNumber")
                        .HasColumnType("integer")
                        .HasColumnName("recommendation_number");

                    b.Property<string>("RecommendationString")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("recommendation_string");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("show_name");

                    b.Property<double>("TargetPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("target_price");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_forecast_targets");

                    b.ToTable("forecast_targets", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.FutureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("asset_type");

                    b.Property<string>("BasicAsset")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("basic_asset");

                    b.Property<double>("BasicAssetSize")
                        .HasColumnType("double precision")
                        .HasColumnName("basic_asset_size");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<DateOnly>("FirstTradeDate")
                        .HasColumnType("date")
                        .HasColumnName("first_trade_date");

                    b.Property<string>("FutureType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("future_type");

                    b.Property<double>("InitialMarginOnBuy")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_margin_on_buy");

                    b.Property<double>("InitialMarginOnSell")
                        .HasColumnType("double precision")
                        .HasColumnName("initial_margin_on_sell");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("LastPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_price");

                    b.Property<DateOnly>("LastTradeDate")
                        .HasColumnType("date")
                        .HasColumnName("last_trade-date");

                    b.Property<int>("Lot")
                        .HasColumnType("integer")
                        .HasColumnName("lot");

                    b.Property<double>("MinPriceIncrementAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("min_price_increment_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_futures");

                    b.ToTable("futures", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.InstrumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_instruments");

                    b.ToTable("instruments", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.MarketEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("instrument_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MarketEventText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("market_event_text");

                    b.Property<string>("MarketEventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("market_event_type");

                    b.Property<bool>("SentNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("sent_notification");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_market_events");

                    b.ToTable("market_events", "storage");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.MultiplicatorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Beta")
                        .HasColumnType("double precision")
                        .HasColumnName("beta");

                    b.Property<double>("Bv")
                        .HasColumnType("double precision")
                        .HasColumnName("bv");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<double>("Ebitda")
                        .HasColumnType("double precision")
                        .HasColumnName("ebitda");

                    b.Property<double>("Eps")
                        .HasColumnType("double precision")
                        .HasColumnName("eps");

                    b.Property<double>("Ev")
                        .HasColumnType("double precision")
                        .HasColumnName("ev");

                    b.Property<double>("EvToEbitda")
                        .HasColumnType("double precision")
                        .HasColumnName("ev_to_ebitda");

                    b.Property<double>("FreeCashFlow")
                        .HasColumnType("double precision")
                        .HasColumnName("free_cash_flow");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("MarketCapitalization")
                        .HasColumnType("double precision")
                        .HasColumnName("market_capitalization");

                    b.Property<double>("NetDebt")
                        .HasColumnType("double precision")
                        .HasColumnName("net_debt");

                    b.Property<double>("NetDebtToEbitda")
                        .HasColumnType("double precision")
                        .HasColumnName("net_debt_to_ebitda");

                    b.Property<double>("NetIncome")
                        .HasColumnType("double precision")
                        .HasColumnName("net_income");

                    b.Property<double>("NetInterestMargin")
                        .HasColumnType("double precision")
                        .HasColumnName("net_interest_margin");

                    b.Property<double>("OperatingIncome")
                        .HasColumnType("double precision")
                        .HasColumnName("operating_income");

                    b.Property<double>("Pb")
                        .HasColumnType("double precision")
                        .HasColumnName("pb");

                    b.Property<double>("Pbv")
                        .HasColumnType("double precision")
                        .HasColumnName("pbv");

                    b.Property<double>("Pe")
                        .HasColumnType("double precision")
                        .HasColumnName("pe");

                    b.Property<double>("Revenue")
                        .HasColumnType("double precision")
                        .HasColumnName("revenue");

                    b.Property<double>("Roa")
                        .HasColumnType("double precision")
                        .HasColumnName("roa");

                    b.Property<double>("Roe")
                        .HasColumnType("double precision")
                        .HasColumnName("roe");

                    b.Property<string>("TickerAo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker_ao");

                    b.Property<string>("TickerAp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker_ap");

                    b.Property<double>("TotalDebt")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt");

                    b.Property<double>("TotalDebtToEbitda")
                        .HasColumnType("double precision")
                        .HasColumnName("total_debt_to_ebitda");

                    b.Property<double>("TotalSharesAo")
                        .HasColumnType("double precision")
                        .HasColumnName("total_shares_ao");

                    b.Property<double>("TotalSharesAp")
                        .HasColumnType("double precision")
                        .HasColumnName("total_shares_ap");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_multiplicators");

                    b.ToTable("multiplicators", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.ShareEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Figi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("figi");

                    b.Property<Guid>("InstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("instrument_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isin");

                    b.Property<double>("LastPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("last_price");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sector");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ticker");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_shares");

                    b.ToTable("shares", "public");
                });

            modelBuilder.Entity("Oid85.FinMarket.DataAccess.Entities.SpreadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("FirstInstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_instrument_id");

                    b.Property<double>("FirstInstrumentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("first_instrument_price");

                    b.Property<string>("FirstInstrumentRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_instrument_role");

                    b.Property<string>("FirstInstrumentTicker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_instrument_ticker");

                    b.Property<double>("Funding")
                        .HasColumnType("double precision")
                        .HasColumnName("funding");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision")
                        .HasColumnName("multiplier");

                    b.Property<double>("PriceDifference")
                        .HasColumnType("double precision")
                        .HasColumnName("price_difference");

                    b.Property<double>("PriceDifferenceAverage")
                        .HasColumnType("double precision")
                        .HasColumnName("price_difference_average");

                    b.Property<double>("PriceDifferenceAveragePrc")
                        .HasColumnType("double precision")
                        .HasColumnName("price_difference_average_prc");

                    b.Property<double>("PriceDifferencePrc")
                        .HasColumnType("double precision")
                        .HasColumnName("price_difference_prc");

                    b.Property<Guid>("SecondInstrumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("second_instrument_id");

                    b.Property<double>("SecondInstrumentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("second_instrument_price");

                    b.Property<string>("SecondInstrumentRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("second_instrument_role");

                    b.Property<string>("SecondInstrumentTicker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("second_instrument_ticker");

                    b.Property<string>("SpreadPricePosition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("price_position");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_spreads");

                    b.ToTable("spreads", "storage");
                });
#pragma warning restore 612, 618
        }
    }
}
